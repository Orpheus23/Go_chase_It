#include "ros/ros.h"
#include "ball_chaser/DriveToTarget.h"
#include <sensor_msgs/Image.h>

// Define a global client that can request services
ros::ServiceClient client;

// This function calls the command_robot service to drive the robot in the specified direction
void drive_robot(float lin_x, float ang_z)
{
    // TODO: Request a service and pass the velocities to it to drive the robot
    ball_chaser::DriveToTarget srv;
    srv.request.linear_x = lin_x;
    srv.request.angular_z = ang_z;
    if(!client.call(srv)){
      ROS_ERROR("can't drive")
    }
}

// This callback function continuously executes and reads the image data
void process_image_callback(const sensor_msgs::Image img)
{

    int white_pixel = 255;
    
    count_pixels=0
    offset=0.0
    // TODO: Loop through each pixel in the image and check if there's a bright white one
    // Then, identify if this pixel falls in the left, mid, or right side of the image
    // Depending on the white ball position, call the drive_bot function and pass velocities to it
    // Request a stop when there's no white ball seen by the camera
    speed=0.1
for (int i = 0; i < img.height; i++) {
      for(int j = 0; j < img.step; j++) {
        position = i * img.step + j;

        if (position % 3 != 0) continue; 
          // chck if pixel is white (255 value)
        if (img.data[position] == white_pixel and img.data[position + 1] == white_pixel and img.data[position + 2] == white_pixel){ 
          offset += j - img.step / 2.0;   // offset = 0 middle of Image 
          found = true;
          count_pixels++;
        }
      }
    }
    // if in front stop robot
    if (count_pixels >= stop) {
      ROS_INFO_STREAM("Infront of Ball stop Robot");
      drive_robot(0.0, 0);
      return;
    }
pos = 4.0 * offset / count_pixels / (img.step /2.0);
if (found) {
      this->drive_robot(speed, pos);
      ROS_INFO_STREAM("Chasing the ball with speed of " << speed << " %" );
    } else {
      // search turn 360 degree
      ROS_INFO_STREAM("No Ball found Search Mode ");
      this->drive_robot(0.1,-1);
    }
  }
}
int main(int argc, char** argv)
{
    // Initialize the process_image node and create a handle to it
    ros::init(argc, argv, "process_image");
    ros::NodeHandle n;

    // Define a client service capable of requesting services from command_robot
    client = n.serviceClient<ball_chaser::DriveToTarget>("/ball_chaser/command_robot");

    // Subscribe to /camera/rgb/image_raw topic to read the image data inside the process_image_callback function
    ros::Subscriber sub1 = n.subscribe("/camera/rgb/image_raw", 10, process_image_callback);

    // Handle ROS communication events
    ros::spin();

    return 0;
}
